<testSuite>
<testCase>
<compact>
<correct>
foo = xsd:token
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:restriction base="xs:token"/>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = xsd:token { minLength = "2" maxLength = "17" }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:restriction base="xs:token">
      <xs:minLength value="2"/>
      <xs:maxLength value="17"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = "stuff"
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:restriction base="xs:token">
      <xs:enumeration value="stuff"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = xsd:integer "1" | xsd:integer "2"
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:restriction base="xs:integer">
      <xs:enumeration value="1"/>
      <xs:enumeration value="2"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = xsd:integer "1" | xsd:double "1.0"
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:union>
      <xs:simpleType>
        <xs:restriction base="xs:integer">
          <xs:enumeration value="1"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType>
        <xs:restriction base="xs:double">
          <xs:enumeration value="1.0"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = list { xsd:int* }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:list itemType="xs:int"/>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = list { xsd:int+ }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:restriction>
      <xs:simpleType>
        <xs:list itemType="xs:int"/>
      </xs:simpleType>
      <xs:minLength value="1"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = list { xsd:int, xsd:int+ }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:restriction>
      <xs:simpleType>
        <xs:list>
          <xs:simpleType>
            <xs:union memberTypes="xs:int xs:int"/>
          </xs:simpleType>
        </xs:list>
      </xs:simpleType>
      <xs:minLength value="2"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = list { empty }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:restriction base="xs:token">
      <xs:length value="0"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = list { notAllowed } | xsd:int
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:restriction base="xs:int"/>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = empty, xsd:int
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:restriction base="xs:int"/>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = xsd:int*
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:simpleType name="foo">
    <xs:restriction base="xs:int"/>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = element foo { empty }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = element foo { attribute bar { xsd:double }, (xsd:int | xsd:boolean) }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:simpleContent>
	<xs:restriction base="xs:anyType">
	  <xs:simpleType>
	    <xs:union memberTypes="xs:int xs:boolean"/>
	  </xs:simpleType>
	  <xs:attribute name="bar" use="required" type="xs:double"/>
	</xs:restriction>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
foo = element foo { bar }
bar = xsd:int | xsd:boolean
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo" type="bar"/>
  <xs:simpleType name="bar">
    <xs:union memberTypes="xs:int xs:boolean"/>
  </xs:simpleType>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
bar = element bar { foo }
foo = attribute foo { xsd:double } | element foo { xsd:double }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="bar">
    <xs:complexType>
      <xs:group ref="foo"/>
      <xs:attributeGroup ref="foo"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="foo">
    <xs:sequence>
      <xs:element ref="foo" minOccurs="0"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="foo" type="xs:double"/>
  <xs:attributeGroup name="foo">
    <xs:attribute name="foo" type="xs:double"/>
  </xs:attributeGroup>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
start = foo
foo = element foo { empty }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified" version="1.0">
<xs:element name="foo">
  <xs:complexType/>
</xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
start = root
root = foo|bar
foo = element foo { empty }
bar = element bar { empty }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified" version="1.0">
<xs:group name="root">
  <xs:choice>
    <xs:element ref="foo"/>
    <xs:element ref="bar"/>
  </xs:choice>
</xs:group>
<xs:element name="foo">
  <xs:complexType/>
</xs:element>
<xs:element name="bar">
  <xs:complexType/>
</xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
 element foo { empty } | element bar { empty }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified" version="1.0">
<xs:element name="foo">
  <xs:complexType/>
</xs:element>
<xs:element name="bar">
  <xs:complexType/>
</xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<resource name="bar.rnc">
bar = element bar { empty }
baz = element baz { empty }
</resource>
<correct>
foo = element foo { bar | baz }
include "bar.rnc"
</correct>
</compact>
<xsd>
<resource name="bar.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="bar">
    <xs:complexType/>
  </xs:element>
  <xs:element name="baz">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:include schemaLocation="bar.xsd"/>
  <xs:element name="foo">
    <xs:complexType>
      <xs:choice>
	<xs:element ref="bar"/>
	<xs:element ref="baz"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg = "http://www.example.com"
element eg:foo { empty }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified" version="1.0"
 targetNamespace="http://www.example.com" xmlns:eg="http://www.example.com">
  <xs:element name="foo">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
default namespace = "http://www.example.com"
element foo { empty }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified" version="1.0"
 targetNamespace="http://www.example.com" xmlns:ns1="http://www.example.com">
  <xs:element name="foo">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<resource name="foo.rnc">
start = element foo { empty }
</resource>
<correct>
default namespace = "http://www.example.com"

include "foo.rnc"
</correct>
</compact>
<xsd>
<resource name="foo.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com" xmlns:ns1="http://www.example.com">
  <xs:element name="foo">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com" xmlns:ns1="http://www.example.com">
  <xs:include schemaLocation="foo.xsd"/>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"
namespace e2 = "http://www.example.com/2"

element e1:x {
  element e2:y {
    empty
  }
}

</correct>
</compact>
<xsd>
<resource name="e2.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/2" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/1" schemaLocation="c.xsd"/>
  <xs:element name="y">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/2" schemaLocation="e2.xsd"/>
  <xs:element name="x">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="e2:y"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>

</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"

element e1:x {
  element y {
    empty
  }
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e1="http://www.example.com/1">
  <xs:element name="x">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="y" form="unqualified">
          <xs:complexType/>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"

element e1:x {
  element y {
    element e1:z {
      empty
    }
  }
}

</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e1="http://www.example.com/1">
  <xs:element name="x">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="y" form="unqualified">
          <xs:complexType>
            <xs:sequence>
              <xs:element ref="e1:z"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="z">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"
namespace e2 = "http://www.example.com/2"

element e1:x {
  element e2:y {
    element e1:z {
      empty
    }
  }
}
</correct>
</compact>
<xsd>
<resource name="e2.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/2" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/1" schemaLocation="c.xsd"/>
  <xs:element name="y">
    <xs:complexType>
      <xs:sequence>
	<xs:element ref="e1:z"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/2" schemaLocation="e2.xsd"/>
  <xs:element name="x">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="e2:y"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="z">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"
namespace e2 = "http://www.example.com/2"

element e1:x { empty } | element e2:y { empty }
</correct>
</compact>
<xsd>
<resource name="e1.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/2" schemaLocation="c.xsd"/>
  <xs:element name="x">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/2" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/1" schemaLocation="e1.xsd"/>
  <xs:element name="y">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"
namespace e2 = "http://www.example.com/2"

start = x | y
x = element e1:x { y? }
y = element e2:y { x? }
</correct>
</compact>
<xsd>
<resource name="e1.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/2" schemaLocation="c.xsd"/>
  <xs:element name="x">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="e2:y"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/2" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/1" schemaLocation="e1.xsd"/>
  <xs:element name="y">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="e1:x"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"

element e1:x { attribute e1:a { text } }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e1="http://www.example.com/1">
  <xs:element name="x">
    <xs:complexType>
      <xs:attribute name="a" form="qualified" use="required"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"

element x { empty } | element e1:y { empty }
</correct>
</compact>
<xsd>
<resource name="local.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/1" schemaLocation="c.xsd"/>
  <xs:element name="x">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e1="http://www.example.com/1">
  <xs:import schemaLocation="local.xsd"/>
  <xs:element name="y">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<resource name="example.rnc">
namespace eg = "http://www.example.com"

start = element eg:y { x }
</resource>
<correct>
x = element x { empty }

include "example.rnc"
</correct>
</compact>
<xsd>
<resource name="example.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com" xmlns:eg="http://www.example.com">
  <xs:import schemaLocation="c.xsd"/>
  <xs:element name="y">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="x"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" xmlns:eg="http://www.example.com">
  <xs:import namespace="http://www.example.com" schemaLocation="example.xsd"/>
  <xs:element name="x">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg = "http://www.example.com"

element x { attribute eg:y { text } }
</correct>
</compact>
<xsd>
<resource name="eg.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com" xmlns:eg="http://www.example.com">
  <xs:import schemaLocation="c.xsd"/>
  <xs:attribute name="y"/>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" xmlns:eg="http://www.example.com">
  <xs:import namespace="http://www.example.com" schemaLocation="eg.xsd"/>
  <xs:element name="x">
    <xs:complexType>
      <xs:attribute ref="eg:y" use="required"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo|bar|baz { empty }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType/>
  </xs:element>
  <xs:element name="bar">
    <xs:complexType/>
  </xs:element>
  <xs:element name="baz">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
start = root
root = element foo|bar|baz { empty }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:group name="root">
    <xs:choice>
      <xs:element ref="foo"/>
      <xs:element ref="bar"/>
      <xs:element ref="baz"/>
    </xs:choice>
  </xs:group>
  <xs:element name="foo">
    <xs:complexType/>
  </xs:element>
  <xs:element name="bar">
    <xs:complexType/>
  </xs:element>
  <xs:element name="baz">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo { attribute bar|baz { text } }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attribute name="bar"/>
      <xs:attribute name="baz"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"
namespace e2 = "http://www.example.com/2"

element e1:x { element e2:y|e2:z { element e2:y { empty } } }

</correct>
</compact>
<xsd>
<resource name="e2.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/2" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/1" schemaLocation="c.xsd"/>
  <xs:element name="y">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="y">
          <xs:complexType/>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="z">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="y">
          <xs:complexType/>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/2" schemaLocation="e2.xsd"/>
  <xs:element name="x">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="e2:y"/>
        <xs:element ref="e2:z"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"
namespace e2 = "http://www.example.com/2"
namespace e3 = "http://www.example.com/3"

element e1:x { element e2:y|e3:z { element e1:x|e1:v { empty } } }
| element e1:w { element e2:y { text } }
</correct>
</compact>
<xsd>
<resource name="e2.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/2" xmlns:e3="http://www.example.com/3" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/3" schemaLocation="e3.xsd"/>
  <xs:import namespace="http://www.example.com/1" schemaLocation="c.xsd"/>
  <xs:group name="y">
    <xs:sequence>
      <xs:element name="y">
        <xs:complexType>
	  <xs:choice>
	    <xs:group ref="e1:x"/>
	    <xs:element ref="e1:v"/>
	  </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="y1">
    <xs:sequence>
      <xs:element name="y">
        <xs:complexType mixed="true"/>
      </xs:element>
    </xs:sequence>
  </xs:group>
</xs:schema>
</resource>
<resource name="e3.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/3" xmlns:e3="http://www.example.com/3" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/2" schemaLocation="e2.xsd"/>
  <xs:import namespace="http://www.example.com/1" schemaLocation="c.xsd"/>
  <xs:element name="z">
    <xs:complexType>
      <xs:choice>
	<xs:group ref="e1:x"/>
	<xs:element ref="e1:v"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e3="http://www.example.com/3" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/3" schemaLocation="e3.xsd"/>
  <xs:import namespace="http://www.example.com/2" schemaLocation="e2.xsd"/>
  <xs:element name="x">
    <xs:complexType>
      <xs:choice>
	<xs:group ref="e2:y"/>
	<xs:element ref="e3:z"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="v">
    <xs:complexType/>
  </xs:element>
  <xs:element name="w">
    <xs:complexType>
      <xs:group ref="e2:y1"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="x">
    <xs:sequence>
      <xs:element name="x">
        <xs:complexType/>
      </xs:element>
    </xs:sequence>
  </xs:group>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace e1 = "http://www.example.com/1"
namespace e2 = "http://www.example.com/2"

element e1:x { element e1:x|e2:y { element e1:x|e2:y { empty } } }
</correct>
</compact>
<xsd>
<resource name="e2.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/2" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/1" schemaLocation="c.xsd"/>
  <xs:group name="y">
    <xs:sequence>
      <xs:element name="y">
        <xs:complexType/>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="y1">
    <xs:sequence>
      <xs:element name="y">
        <xs:complexType>
	  <xs:choice>
	    <xs:group ref="e1:x"/>
	    <xs:element name="y">
	      <xs:complexType/>
	    </xs:element>
	  </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e2="http://www.example.com/2" xmlns:e1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/2" schemaLocation="e2.xsd"/>
  <xs:element name="x">
    <xs:complexType>
      <xs:choice>
	<xs:element name="x">
	  <xs:complexType>
	    <xs:choice>
	      <xs:element name="x">
		<xs:complexType/>
	      </xs:element>
	      <xs:group ref="e2:y"/>
	    </xs:choice>
	  </xs:complexType>
	</xs:element>
	<xs:group ref="e2:y1"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:group name="x">
    <xs:sequence>
      <xs:element name="x">
        <xs:complexType/>
      </xs:element>
    </xs:sequence>
  </xs:group>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct><![CDATA[
start = element foo { bar1 & bar2 & bar3 & bar4 & bar5 }
bar1 =  element bar1 { empty }
bar2 =  element bar2 { empty }?
bar3 =  element bar3 { empty }*
bar4 =  element bar4 { empty }+
bar5 = element bar5 { empty }, element bar6 { empty }
]]></correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="bar1"/>
        <xs:group ref="bar2"/>
        <xs:group ref="bar3"/>
        <xs:group ref="bar4"/>
        <xs:choice>
          <xs:element ref="bar5"/>
          <xs:element ref="bar6"/>
        </xs:choice>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="bar5">
    <xs:complexType/>
  </xs:element>
  <xs:element name="bar6">
    <xs:complexType/>
  </xs:element>
  <xs:element name="bar1">
    <xs:complexType/>
  </xs:element>
  <xs:group name="bar2">
    <xs:sequence>
       <xs:element minOccurs="0" ref="bar2"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="bar2">
    <xs:complexType/>
  </xs:element>
  <xs:group name="bar3">
    <xs:sequence>
      <xs:element ref="bar3" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="bar3">
    <xs:complexType/>
  </xs:element>
  <xs:group name="bar4">
    <xs:sequence>
      <xs:element ref="bar4" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="bar4">
    <xs:complexType/>
  </xs:element>
  <xs:group name="bar5">
    <xs:sequence>
      <xs:element ref="bar5"/>
      <xs:element ref="bar6"/>
    </xs:sequence>
  </xs:group>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
start = element foo { bar }
bar = element bar { bar* }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="bar"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="bar">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="bar" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct><![CDATA[element foo {
  element bar { empty } *
  & element baz { empty } *
}
]]></correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="bar"/>
        <xs:element ref="baz"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="bar">
    <xs:complexType/>
  </xs:element>
  <xs:element name="baz">
    <xs:complexType/>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>element foo {
  attribute xml:lang { xsd:language }
}
| element bar {
  attribute xml:lang { xsd:language }
}</correct>
</compact>
<xsd>
<resource name="xml.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.w3.org/XML/1998/namespace">
  <xs:import schemaLocation="c.xsd"/>
  <xs:attribute name="lang" type="xs:language"/>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
  <xs:element name="foo">
    <xs:complexType>
      <xs:attribute ref="xml:lang" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="bar">
    <xs:complexType>
      <xs:attribute ref="xml:lang" use="required"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>element foo {
  attribute bar { text },
  xsd:float
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:float">
          <xs:attribute name="bar" use="required"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
start = element foo { int|double|float }

int = attribute type { "int" }, xsd:int
double = attribute type { "double" }, xsd:double
float = attribute type { "float" }, xsd:float

</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:simpleContent>
        <xs:restriction base="xs:anyType">
          <xs:simpleType>
            <xs:union memberTypes="int double float"/>
          </xs:simpleType>
          <xs:attribute name="type" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="int"/>
                <xs:enumeration value="double"/>
                <xs:enumeration value="float"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:restriction>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="int">
    <xs:restriction base="xs:int"/>
  </xs:simpleType>
  <xs:attributeGroup name="int">
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="int"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="double">
    <xs:restriction base="xs:double"/>
  </xs:simpleType>
  <xs:attributeGroup name="double">
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="double"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="float">
    <xs:restriction base="xs:float"/>
  </xs:simpleType>
  <xs:attributeGroup name="float">
    <xs:attribute name="type" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="float"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
start = element foo { atts } | element bar { atts? }
atts = attribute a1 { text }, more-atts
more-atts = attribute a2 { text }?
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attributeGroup ref="atts"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="bar">
    <xs:complexType>
      <xs:attribute name="a1"/>
      <xs:attributeGroup ref="more-atts"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="atts">
    <xs:attribute name="a1" use="required"/>
    <xs:attributeGroup ref="more-atts"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="more-atts">
    <xs:attribute name="a2"/>
  </xs:attributeGroup>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo { attribute bar { text } | attribute bar { xsd:float } }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attribute name="bar" use="required"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
start = element foo { bar1 | bar2 }

bar1 = attribute bar { text }, attribute baz1 { text }?
bar2 = attribute bar { xsd:float }, attribute baz2 { text }?
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attributeGroup ref="bar1"/>
      <xs:attribute name="baz2"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="bar1">
    <xs:attribute name="bar" use="required"/>
    <xs:attribute name="baz1"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="bar2">
    <xs:attribute name="bar" use="required" type="xs:float"/>
    <xs:attribute name="baz2"/>
  </xs:attributeGroup>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct><![CDATA[element foo {
  xsd:string { pattern = "[a-zA-Z]+" }
}
| element bar {
  xsd:string {
    pattern = "[a-zA-Z]+"
    pattern = "[^zZ]*"
    pattern = "[^aA]*"
  }
}
]]></correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:simpleType>
      <xs:restriction base="xs:string">
        <xs:pattern value="[a-zA-Z]+"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <xs:element name="bar">
    <xs:simpleType>
      <xs:restriction>
        <xs:simpleType>
          <xs:restriction>
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:pattern value="[a-zA-Z]+"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:pattern value="[^zZ]*"/>
          </xs:restriction>
        </xs:simpleType>
        <xs:pattern value="[^aA]*"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg = "http://www.example.com"
namespace local = ""

element eg:foo { attribute * - (eg:*|local:*) { text }* }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com" xmlns:eg="http://www.example.com">
  <xs:element name="foo">
    <xs:complexType>
      <xs:anyAttribute namespace="##other" processContents="skip"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg1 = "http://www.example.com/1"
namespace eg2 = "http://www.example.com/2"

start = element foo { eg1, eg2 }

eg1 = attribute eg1:* { text } *
eg2 = attribute eg2:* { text } *

</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:anyAttribute namespace="http://www.example.com/2 http://www.example.com/1" processContents="skip"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="eg1">
    <xs:anyAttribute namespace="http://www.example.com/1" processContents="skip"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="eg2">
    <xs:anyAttribute namespace="http://www.example.com/2" processContents="skip"/>
  </xs:attributeGroup>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg1 = "http://www.example.com/1"
namespace eg2 = "http://www.example.com/2"

start = element foo { eg1, eg2 }

eg1 = attribute eg1:*|eg2:* { text } *
eg2 = attribute eg2:* { text } *
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attributeGroup ref="eg1"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="eg1">
    <xs:anyAttribute namespace="http://www.example.com/2 http://www.example.com/1" processContents="skip"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="eg2">
    <xs:anyAttribute namespace="http://www.example.com/2" processContents="skip"/>
  </xs:attributeGroup>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg1 = "http://www.example.com/1"
namespace eg2 = "http://www.example.com/2"

start = element foo { eg1, eg2 }

eg1 = attribute eg1:* { text } *
eg2 = attribute eg1:*|eg2:* { text } *

</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attributeGroup ref="eg2"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="eg1">
    <xs:anyAttribute namespace="http://www.example.com/1" processContents="skip"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="eg2">
    <xs:anyAttribute namespace="http://www.example.com/2 http://www.example.com/1" processContents="skip"/>
  </xs:attributeGroup>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo { attribute * - bar { text }+, attribute bar { xsd:float } }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attribute name="bar" use="required" type="xs:float"/>
      <xs:anyAttribute processContents="skip"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg = "http://www.example.com"
namespace local = ""

element eg:foo { attribute * - (local:*|(eg:* - eg:bar)) { xsd:float }* }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com" xmlns:eg="http://www.example.com">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attribute name="bar" form="qualified" type="xs:float"/>
      <xs:anyAttribute namespace="##other" processContents="skip"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo { attribute * { text }* | attribute bar { xsd:string } }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:anyAttribute processContents="skip"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo { attribute * - bar { text }* | attribute bar { xsd:float } }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attribute name="bar" type="xs:float"/>
      <xs:anyAttribute processContents="skip"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg = "http://www.example.com"

element foo {
  attribute eg:* { text }*
  | attribute bar { xsd:float }
  | attribute eg:bar { xsd:float }
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attribute name="bar" type="xs:float"/>
      <xs:anyAttribute namespace="http://www.example.com" processContents="skip"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo {
  element * { text }
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:sequence>
        <xs:any processContents="skip"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<resource name="eg1.rnc">
foo2 = element foo2 { bar }
</resource>
<resource name="eg2.rnc">
namespace e2 = "http://www.example.com/2"

bar = element e2:bar1 { element baz { empty } }
      | element e2:bar2 { element baz { text } }
</resource>
<correct>
default namespace = "http://www.example.com/1"

include "eg1.rnc"
include "eg2.rnc"

start = element foo1 { bar } | foo2
</correct>
</compact>
<xsd>
<resource name="eg1.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e2="http://www.example.com/2" xmlns:ns1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/2" schemaLocation="eg2.xsd"/>
  <xs:element name="foo2">
    <xs:complexType>
      <xs:group ref="e2:bar"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</resource>
<resource name="eg2.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/2" xmlns:e2="http://www.example.com/2" xmlns:ns1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/1" schemaLocation="c.xsd"/>
  <xs:group name="bar">
    <xs:choice>
      <xs:element ref="e2:bar1"/>
      <xs:element ref="e2:bar2"/>
    </xs:choice>
  </xs:group>
  <xs:element name="bar1">
    <xs:complexType>
      <xs:group ref="ns1:baz"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="bar2">
    <xs:complexType>
      <xs:group ref="ns1:baz1"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:e2="http://www.example.com/2" xmlns:ns1="http://www.example.com/1">
  <xs:include schemaLocation="eg1.xsd"/>
  <xs:import namespace="http://www.example.com/2" schemaLocation="eg2.xsd"/>
  <xs:element name="foo1">
    <xs:complexType>
      <xs:group ref="e2:bar"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="baz">
    <xs:sequence>
      <xs:element name="baz">
        <xs:complexType/>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="baz1">
    <xs:sequence>
      <xs:element name="baz">
        <xs:complexType mixed="true"/>
      </xs:element>
    </xs:sequence>
  </xs:group>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg1 = "http://www.example.com/1"
namespace eg2 = "http://www.example.com/2"
namespace eg3 = "http://www.example.com/3"

element eg2:foo {
  element * - eg1:* { text },
  element * - eg2:* { text },
  element * - eg3:* { text }
}
</correct>
</compact>
<xsd>
<resource name="eg3.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/3" xmlns:eg3="http://www.example.com/3" xmlns:eg2="http://www.example.com/2" xmlns:eg1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/2" schemaLocation="c.xsd"/>
  <xs:import namespace="http://www.example.com/1" schemaLocation="eg1.xsd"/>
  <xs:group name="local">
    <xs:sequence>
      <xs:any namespace="##other" processContents="skip"/>
    </xs:sequence>
  </xs:group>
</xs:schema>
</resource>
<resource name="eg1.xsd">
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/1" xmlns:eg3="http://www.example.com/3" xmlns:eg2="http://www.example.com/2" xmlns:eg1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/3" schemaLocation="eg3.xsd"/>
  <xs:import namespace="http://www.example.com/2" schemaLocation="c.xsd"/>
  <xs:group name="local">
    <xs:sequence>
      <xs:any namespace="##other" processContents="skip"/>
    </xs:sequence>
  </xs:group>
</xs:schema>
</resource>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com/2" xmlns:eg3="http://www.example.com/3" xmlns:eg2="http://www.example.com/2" xmlns:eg1="http://www.example.com/1">
  <xs:import namespace="http://www.example.com/3" schemaLocation="eg3.xsd"/>
  <xs:import namespace="http://www.example.com/1" schemaLocation="eg1.xsd"/>
  <xs:element name="foo">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:group ref="eg1:local"/>
          <xs:any namespace="##local" processContents="skip"/>
        </xs:choice>
        <xs:choice>
          <xs:any namespace="##other" processContents="skip"/>
          <xs:any namespace="##local" processContents="skip"/>
        </xs:choice>
        <xs:choice>
          <xs:group ref="eg3:local"/>
          <xs:any namespace="##local" processContents="skip"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
datatypes x = "http://x.org"
element foo { x:bar { pattern = "[a-zA-Z]*" } }
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo" type="xs:string"/>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo {
  attribute bar { xsd:integer? }
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attribute name="bar" use="required">
        <xs:simpleType>
          <xs:union memberTypes="xs:integer">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:length value="0"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo {
  attribute bar { empty }
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:attribute name="bar" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:length value="0"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo {
  xsd:float?
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:simpleType>
      <xs:union memberTypes="xs:float">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:length value="0"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:union>
    </xs:simpleType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo {
  attribute bar { text },
  xsd:float?
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType>
      <xs:simpleContent>
        <xs:restriction base="xs:anyType">
          <xs:simpleType>
            <xs:union memberTypes="xs:float">
              <xs:simpleType>
                <xs:restriction base="xs:token">
                  <xs:length value="0"/>
                </xs:restriction>
              </xs:simpleType>
            </xs:union>
          </xs:simpleType>
          <xs:attribute name="bar" use="required"/>
        </xs:restriction>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo {
 notAllowed
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo" abstract="true"/>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg = "http://www.example.com"

element eg:foo {
 element bar { notAllowed }
 | element baz { text }
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com" xmlns:eg="http://www.example.com">
  <xs:element name="foo">
    <xs:complexType>
      <xs:choice>
        <xs:element name="bar" form="unqualified">
          <xs:complexType>
            <xs:choice/>
          </xs:complexType>
        </xs:element>
        <xs:element name="baz" form="unqualified">
          <xs:complexType mixed="true"/>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo {
  attribute format { xsd:NOTATION "bar" },
  text
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType mixed="true">
      <xs:attribute name="format" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:QName">
            <xs:enumeration value="bar"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo {
  attribute format { xsd:NOTATION },
  text
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:complexType mixed="true">
      <xs:attribute name="format" use="required" type="xs:QName"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo {
  xsd:QName "xyzzy"
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:simpleType>
      <xs:restriction base="xs:QName">
        <xs:enumeration value="xyzzy"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
default namespace = "http://www.example.com"

element foo {
  xsd:QName "xyzzy"
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0" targetNamespace="http://www.example.com" xmlns:ns1="http://www.example.com">
  <xs:element name="foo">
    <xs:simpleType>
      <xs:restriction base="xs:QName">
        <xs:enumeration value="xyzzy" xmlns="http://www.example.com"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace eg = "http://www.example.com"

element foo {
  xsd:QName "eg:xyzzy"
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:simpleType>
      <xs:restriction base="xs:QName">
        <xs:enumeration value="eg:xyzzy" xmlns:eg="http://www.example.com"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
namespace xs = "http://www.example.com"

element foo {
  xsd:QName "xs:xyzzy"
}
</correct>
</compact>
<xsd>
<correct>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xsd:element name="foo">
    <xsd:simpleType>
      <xsd:restriction base="xsd:QName">
        <xsd:enumeration value="xs:xyzzy" xmlns:xs="http://www.example.com"/>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:element>
</xsd:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<correct>
element foo {
  xsd:QName "xyzzy"
}
</correct>
</compact>
<xsd>
<correct>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" version="1.0">
  <xs:element name="foo">
    <xs:simpleType>
      <xs:restriction base="xs:QName">
        <xs:enumeration value="xyzzy"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
</xs:schema>
</correct>
</xsd>
</testCase>
<testCase>
<compact>
<incorrect>
start = element foo { x }
x = element bar { empty }, x?
</incorrect>
</compact>
</testCase>
<testCase>
<compact>
<incorrect>
start = element foo { empty }
x = element bar { empty }, x?
</incorrect>
</compact>
</testCase>
<testCase>
<compact>
<incorrect>
start = element foo { x }
y = element bar { z }
</incorrect>
</compact>
</testCase>
<testCase>
<compact>
<resource name="x.rnc">
element foo { empty }
</resource>
<incorrect>
externalRef "x.rnc"
</incorrect>
</compact>
</testCase>
<testCase>
<compact>
<incorrect>
start = grammar { start = element foo { empty } }
</incorrect>
</compact>
</testCase>
<testCase>
<compact>
<incorrect>
start = element foo { parent x }
x = empty
</incorrect>
</compact>
</testCase>
<testCase>
<compact>
<resource name="foo.rnc">
start = element foo { empty }
</resource>
<incorrect>
include "foo.rnc" {
  start = element foo { text }
}
</incorrect>
</compact>
</testCase>
<testCase>
<compact>
<incorrect>
element foo { xsd:no-such-datatype }
| element bar { xsd:string { pattrn = "[a-zA-Z]+" } }
| element baz { xsd:string { maxLength = "2in" } }
</incorrect>
</compact>
</testCase>
<testCase>
<compact>
<resource name="bad.rnc">
start = element foo { xsd:gdday-bruce }
</resource>
<incorrect>
include "bad.rnc"
</incorrect>
</compact>
</testCase>
<testCase>
<compact>
<resource name="bad.rnc">
element foo { empty }
</resource>
<incorrect>
include "bad.rnc"
</incorrect>
</compact>
</testCase>
<testCase>
<compact>
<resource name="bad.rnc">
start = element foo { xsd:gdday-bruce }
</resource>
<incorrect>
include "bad.rnc"
</incorrect>
</compact>
</testCase>
<!--
<testCase>
<compact>
<correct>
</correct>
</compact>
<xsd>
<correct>
</correct>
</xsd>
</testCase>
-->
</testSuite>
